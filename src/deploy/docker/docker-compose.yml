version: "3.7"

services:
  example-service:
    container_name: example-service-${STACK_NAME} #be extra carefull here container name must NOT contain an underscore _
#    image: goafabric/spring-boot-exampleservice:1.0.4-SNAPSHOT
    image: goafabric/spring-boot-exampleservice${ARCH_SUFFIX}:1.0.4-SNAPSHOT
    restart: 'no'
    ports:
      - 50700:50700
      - 50701:50701
      - 8849:8849
    environment:
      - TZ=Europe/Berlin
      - spring.config.location=/usr/share/config/application.yml
      - logging.config=/usr/share/config/logback-rollingfile-spring.xml
      - spring.datasource.url=jdbc:postgresql://postgres_${STACK_NAME}:5432/countrydb
      - spring.datasource.username=example-service
      - spring.datasource.password=example-service
      - adapter.calleeservice.url=http://host.docker.internal:50900
      - management.database.monitoring.enabled=true

    healthcheck:
      test: "curl -f http://localhost:50700/actuator/health || exit 1"
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - tmp:/tmp
      - applogs:/usr/share/logs
      - ../config/application/application.yml:/usr/share/config/application.yml
      - ../config/application/logback-rollingfile-spring.xml:/usr/share/config/logback-rollingfile-spring.xml
      - ../config/application/demodata:/src/deploy/config/application/demodata
      - ./jprofiler/:/jprofiler/
    entrypoint: ["java","-Xms${SERVICE_MEM}","-Xmx${SERVICE_MEM}",
#                 "-Xshareclasses:none","-agentpath:/jprofiler/bin/linux${ARCH_SUFFIX}/libjprofilerti.so=port=8849",
#                 "-Xshareclasses:none","-agentpath:/jprofiler/bin/linux${ARCH_SUFFIX}/libjprofilerti.so=port=8849,nowait,config=/jprofiler/jprofiler_config.xml",
#                 "-Dcom.sun.management.jmxremote.port=50701","-Dcom.sun.management.jmxremote.rmi.port=50701","-Dcom.sun.management.jmxremote","-Djava.rmi.server.hostname=0.0.0.0","-Dcom.sun.management.jmxremote.authenticate=false","-Dcom.sun.management.jmxremote.ssl=false",
#                 "-XX:+UnlockCommercialFeatures", "-XX:+FlightRecorder","-XX:StartFlightRecording=duration=10s,filename=flight.jfr",
                 "-Djava.security.egd=file:/dev/./urandom","-cp","/app/resources:/app/classes:/app/libs/*","org.goafabric.spring.boot.exampleservice.Application"]

    networks:
      - example-service-net

  postgres:
    container_name: postgres_${STACK_NAME}
    image: postgres:13.1
#    image: arm64v8/postgres:12.4
    #image: postgres:9.6.17-alpine
    restart: 'no'
    ports:
      - 50710:5432
    environment:
      - TZ=Europe/Berlin
      - POSTGRES_USER=example-service
      - POSTGRES_PASSWORD=example-service
      - POSTGRES_DB=countrydb
    command: postgres -c 'shared_buffers=128MB' -c 'max_connections=30' -c 'shared_preload_libraries=pg_stat_statements'
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ../config/postgres/initdb/00_pg_statements.sql:/docker-entrypoint-initdb.d/00_pg_statements.sql
    networks:
      - example-service-net

volumes:
    tmp:
    applogs:
    pgdata:

networks:
  example-service-net:
    driver: bridge
    name: example-service-net