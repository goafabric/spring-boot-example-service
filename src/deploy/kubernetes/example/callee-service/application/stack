#!/bin/bash
source .values
COMMAND=$1
PROFILE=$2

kubectl version | grep "Server Version" | grep "linux/arm64" > /dev/null && _Values_server_arch="-arm64v8"

[ "${PROFILE}" = "-dev" ] && _Values_service_type=NodePort && _Values_service_nodePort=${_Values_service_nodePort_dev}
[ "${COMMAND}" = "jmx" ] && _Values_profiler_command='"-Dcom.sun.management.jmxremote.port=1099","-Dcom.sun.management.jmxremote.rmi.port=1099","-Dcom.sun.management.jmxremote","-Djava.rmi.server.hostname=0.0.0.0","-Dcom.sun.management.jmxremote.authenticate=false","-Dcom.sun.management.jmxremote.ssl=false",'
[ "${COMMAND}" = "profile" ] && _Values_volume_type_profiler="hostPath:" && _Values_volume_path_profiler="path: /home/admin/jprofiler" && _Values_profiler_command='"-Xshareclasses:none","-agentpath:/usr/share/profiler/bin/linux'${_Values_server_arch}'/libjprofilerti.so=port=1099",'

function dynKubectl() {
for filename in $2/*.yml; do
eval "cat <<EOF
$(<$filename)
EOF
" | kubectl $1 -n ${_Release_namespace} -f -
done
}

function up() {
    [ -d "./config/" ] && kubectl create configmap ${_Values_app_name}-config-files --from-file=./config/ -n ${_Release_namespace}
    [ -d "./data/" ] && kubectl create configmap ${_Values_app_name}-data-files --from-file=./data/ -n ${_Release_namespace}
    [ -d "./templates/pvc/" ] && dynKubectl apply ./templates/pvc
    dynKubectl apply ./templates
}

function down() {
    [ -d "./config/" ] && kubectl delete --ignore-not-found configmap ${_Values_app_name}-config-files -n ${_Release_namespace}
    [ -d "./data/" ] && kubectl delete --ignore-not-found configmap ${_Values_app_name}-data-files -n ${_Release_namespace}
    dynKubectl "delete --ignore-not-found" ./templates
}

function prune() {
    down && [ -d "./templates/pvc/" ] && dynKubectl "delete --ignore-not-found" ./templates/pvc
}

function import() {
    prune && up && wait_until_running
    time kubectl logs --follow -l app=${_Values_app_name} -n ${_Release_namespace}
    prune
}

function forward() {
    up && wait_until_running && kubectl port-forward deployment/${_Values_app_name} $1:$1 -n ${_Release_namespace}
}

function wait_until_running() {
    echo waiting for application to start ...
    while ! kubectl get pods -n ${_Release_namespace} | grep ${_Values_app_name} | grep Running > /dev/null ; do sleep 1; done
}

if   [ "${COMMAND}" = "up" ] && [ -f "./templates/deployment.yml" ]; then up;
elif [ "${COMMAND}" = "restart" ] && [ -f "./templates/deployment.yml" ]; then down && up;
elif [ "${COMMAND}" = "down" ]; then down;
elif [ "${COMMAND}" = "prune" ]; then prune;

elif [ "${COMMAND}" = "prov" ] && [ -d "./templates/pvc/" ]; then up;
elif [ "${COMMAND}" = "import" ] && [ -f "./templates/job.yml" ]; then import;

elif [ "${COMMAND}" = "jmx" ]; then down && forward 1099;
elif [ "${COMMAND}" = "profile" ]; then down && forward 1099;
elif [ "${COMMAND}" = "proxy" ]; then forward ${_Values_service_port};

else echo Doing nothing !; fi