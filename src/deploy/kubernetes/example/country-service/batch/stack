#!/bin/bash
COMMAND=$1
source .values
kubectl version | grep "Server Version" | grep "linux/arm64" > /dev/null && _Values_server_arch="-arm64v8"

function dynKubectl() {
for filename in ./templates/*.yml; do
eval "cat <<EOF
$(<$filename)
EOF
" | kubectl $1 $2 -n ${_Release_namespace} -f -
done
}

function up() {
    [ -d "./config/" ] && kubectl create configmap ${_Values_app_name}-config-files --from-file=./config/ -n ${_Release_namespace}
    [ -d "./config/data/" ] && kubectl create configmap ${_Values_app_name}-data-files --from-file=./config/data/ -n ${_Release_namespace}
    [ -d "./templates/pvc/" ] && kubectl apply -f ./templates/pvc/ -n ${_Release_namespace}
    [ -d "./templates/ingress/" ] && kubectl apply -f ./templates/ingress/ -n ${_Release_namespace}
    dynKubectl apply
}

function down() {
    [ -d "./config/" ] && kubectl delete --ignore-not-found configmap ${_Values_app_name}-config-files -n ${_Release_namespace}
    [ -d "./config/data/" ] && kubectl delete --ignore-not-found configmap ${_Values_app_name}-data-files -n ${_Release_namespace}
    [ -d "./templates/ingress/" ] && kubectl delete --ignore-not-found -f ./templates/ingress/ -n ${_Release_namespace}
    dynKubectl delete --ignore-not-found
}

function prune() {
    down
    [ -d "./templates/pvc/" ] && kubectl delete --ignore-not-found -f ./templates/pvc/ -n ${_Release_namespace}
}

function import() {
    prune
    up
    echo waiting for batch to start/load
    while ! kubectl get pods -n ${_Release_namespace} | grep ${_Values_app_name} | grep Running > /dev/null; do sleep 1; done
    kubectl logs --follow -l app=${_Values_app_name} -n ${_Release_namespace}
    prune
  }

if [ "${COMMAND}" = "import" ]
then
    down
    up
    echo waiting for batch to start/load
    while ! kubectl get pods -n ${_Release_namespace} | grep ${_Values_app_name} | grep Running > /dev/null; do sleep 1; done
    kubectl logs --follow -l app=${_Values_app_name} -n ${_Release_namespace}
    down
elif [ "${COMMAND}" = "down" ]
then
    down
elif [ "${COMMAND}" = "prune" ]
then
    prune
elif [ "${COMMAND}" = "restart" ]
then
    down && up
else
    echo Doing nothing !
fi
