apiVersion: apps/v1
kind: Deployment
metadata:
  name: country-service-application
spec:
  selector:
    matchLabels:
      app: country-service-application
  replicas: 1
  strategy:
    type: Recreate #RollingUpdate
  template:
    metadata:
      labels:
        app: country-service-application
    spec:
      # initcontainers justs accepts a docker image, and uses postgres client to check readyness
      initContainers:
        - name: check-db-ready
          image: postgres:12.4
          command: ['sh', '-c',
                    'until pg_isready -h country-service-postgres -p 5432;
                     do echo waiting for database; sleep 2; done;']
      containers:
        - name: country-service-application
          image: goafabric/spring-boot-exampleservice:1.0.4-SNAPSHOT
          imagePullPolicy: IfNotPresent
#          imagePullPolicy: Always
          ports:
            - containerPort: 50700
          command: ["java", "-Xms256M", "-Xmx256M",
                    "-Djava.security.egd=file:/dev/./urandom", "-cp", "/app/resources:/app/classes:/app/libs/*","org.goafabric.spring.boot.exampleservice.Application"]
          resources:
            requests:
              memory: "256M"
              cpu: "250m"
          env:
            - name: server.port
              value: "50700"
          envFrom:
            - configMapRef:
                name: country-service-application-configmap
            - secretRef:
                name: country-service-application-secret
            - configMapRef:
                name: country-service-application-config-dynamic
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 50700
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 5
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 50700
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 5
          volumeMounts:
            - mountPath: /usr/share/logs
              name: country-service-applogs
            - mountPath: /usr/share/config/
              name: country-service-application-config-files-volume
            - mountPath: src/deploy/config/application/demodata
              name: country-service-application-demodata-files-volume

      volumes:
        - name: country-service-applogs
          emptyDir: {}
        # generated from local file system via "kubectl create configmap" inside stack
        - name: country-service-application-config-files-volume
          configMap:
            name: country-service-application-config-files
        - name: country-service-application-demodata-files-volume
          configMap:
            name: country-service-application-demodata-files
