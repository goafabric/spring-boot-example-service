apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-country-service
spec:
  selector:
    matchLabels:
      app: example-country-service
  replicas: 1
  strategy:
    type: Recreate #RollingUpdate
  template:
    metadata:
      labels:
        app: example-country-service
    spec:
      # initcontainers justs accepts a docker image, and uses postgres client to check readyness
      initContainers:
        - name: check-db-ready
          image: postgres:9.6.15-alpine
          command: ['sh', '-c',
                    'until pg_isready -h postgres -p 5432;
                     do echo waiting for database; sleep 2; done;']
      containers:
        - name: example-country-service
          image: goafabric/spring-boot-exampleservice:1.0.4-SNAPSHOT
          imagePullPolicy: Always #IfNotPresent
          ports:
            - containerPort: 50700
          command: ["java", "-Xms256m", "-Xmx256m",
                    "-Djava.security.egd=file:/dev/./urandom", "-cp", "/app/resources:/app/classes:/app/libs/*","org.goafabric.spring.boot.exampleservice.Application"]
          env:
            - name: server.port
              value: "50700"
          envFrom:
            - configMapRef:
                name: example-application-configmap
            - secretRef:
                name: example-application-secret
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 50700
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 5
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 50700
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 5
          volumeMounts:
            - mountPath: /usr/share/logs
              name: example-applogs
            - mountPath: /usr/share/config/
              name: example-application-config-files-volume
            - mountPath: /src/deploy/demodata/
              name: example-application-demodata-files-volume

      volumes:
        - name: example-applogs
          emptyDir: {}
        # generated from local file system via "kubectl create configmap" inside stack
        - name: example-application-config-files-volume
          configMap:
            name: example-application-config-files
        - name: example-application-demodata-files-volume
          configMap:
            name: example-application-demodata-files
