kind: Service
apiVersion: v1
metadata:
  name: example-service
spec:
  selector:
    app: example-service
  ports:
    - protocol: TCP
      port: 50700
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-service
spec:
  selector:
    matchLabels:
      app: example-service
  replicas: 1
  template:
    metadata:
      labels:
        app: example-service
    spec:
      # initcontainers justs accepts a docker image, and uses postgres client to check readyness
      initContainers:
        - name: check-db-ready
          image: postgres:9.6.15-alpine
          command: ['sh', '-c',
                    'until pg_isready -h postgres -p 5432;
                     do echo waiting for database; sleep 2; done;']
      containers:
        - name: example-service
          image: goafabric/spring-boot-exampleservice:1.0.0-SNAPSHOT
          imagePullPolicy: Always
          ports:
            - containerPort: 50700
          command:
            - java
            - -Xms256m
            - -Xmx256m
            - -Djava.security.egd=file:/dev/./urandom
            - -cp
            - /app/resources:/app/classes:/app/libs/*
            - org.goafabric.spring.boot.exampleservice.Application
          env:
            - name: spring.config.location
              value: /usr/share/config/application.yml
            - name: logging.config
              value: /usr/share/config/logback-rollingfile-spring.xml
            - name: spring.datasource.url
              value: "jdbc:postgresql://postgres:5432/countrydb"
          volumeMounts:
            - mountPath: /usr/share/logs
              name: applogs
            - mountPath: /usr/share/config/
              name: application-configs-volume
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 50700
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 50700
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3

      volumes:
        - name: applogs
        # generated from local file system via "kubectl create configmap" inside stack
        - name: application-configs-volume
          configMap:
            name: application-configs
